* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* main {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  width: 90vw;
} */
.exercise_1 {
  display: grid;
  grid-template-columns: 1fr 2fr;
  grid-template-rows: repeat(3, 10vh);
  gap: 10px;
}

.exercise_1 div {
  background-color: darkblue;
  border: 2px solid darkcyan;
  border-radius: 5px;
  color: white;
}

.one {
  grid-column: 1/3;
  grid-row: 1/2;
}

.two {
  grid-column: 1/2;
  grid-row: 2/3;
}

.three {
  text-align: center;
  grid-column: 2/3;
  grid-row: 2/3;
}

.four {
  grid-column: 2/3;
  grid-row: 3/4;
}

/* exercise-2 */

/* ! Variante 1 */

/* .flex_container {
  display: flex;
  justify-content: center;
  align-items: center;
}

.exercise_2 {
  position: relative;
}

.item1 {
  position: absolute;
  width: 40vw;
  height: 10vh;
  background-color: grey;
  border-radius: 5px;
}

.item2 {
  position: absolute;
  left: 30px;
  top: 30px;
  width: 40vw;
  height: 10vh;
  background-color: rgba(255, 81, 220, 0.15);
  border-radius: 5px;
} */

/* ! Variante 2 */

.exercise_2 {
  display: grid;
  grid-template-columns: 1fr 2fr 1fr;
  grid-template-rows: repeat(3, 100px);
}

.item1 {
  background-color: grey;
  border-radius: 5px;
  grid-column: 1/3;
  grid-row: 1/3;
}

.item2 {
  background-color: pink;
  opacity: 70%;
  border-radius: 5px;
  grid-column: 2/4;
  grid-row: 2/4;
}

/* exercise 3*/
.exercise-3 {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
  padding: 10px;
}

.card {
  overflow: hidden;
}

.card img {
  width: 100%;
  height: 36vh;
  object-fit: cover;
  display: block;
  transition: all 0.3s ease-in-out;
}

.card img:hover {
  transform: scale(1.2);
}

/* Nice to know */

.box {
  background-color: teal;
  color: white;
  border-radius: 5px;
  padding: 20px;
  font-size: 1.2rem;
}

/* ! minmax() */
/* => die werte in den runden Klammern geben eine minimale und maximale Höhe und Breite => 1. Wert min, 2.Wert ist max */

.section__minmax {
  display: grid;
  grid-template-columns:
    minmax(200px, 1fr)
    200px 200px;
  /* spalte a ist ist min 200px maximal 1fr */
  gap: 10px;
}

/* !auto-fill => fügt immer neue Spalten hinzu ( selbst wenn sie leer bleiben  */
/* ! Es füllt die Zeilen mit so vielen spalten wie möglich, basiert auf der vrfügbaren Breite, wenn es nicht genug inhalt gibt, bleiben leere Spalten im Grid */

.autofill,
.autofill-2 {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 10px;
}

/* Warum auto ? */
/* Auto bei grid-column oder grid-row bedeutet: "Fang da an, wo platz gibt - also keine feste Werte */

/* Das bdeutet => */
/* das Element .g beginnt automatisch an der nächsten freien Spalte (auto)  */
/* spannt sich über 2 spalten hinweg
*/

.autofill-2 .a {
  grid-column: auto / span 2;
}

.autofill-2 .k {
  grid-column: auto / span 2;
}

.autofill-2 .g {
  grid-column: auto / span 2;
  grid-row: auto / span 2;
}

/* ! auto-fill vs auto-fit */

.container {
  display: grid;
}

/* ! auto-fill behaltet die Struktur bei, auch wenn leere Spalten vorhanden sind, bzw mehr Platz gibt */
.fill {
  grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
}

/* auto-fit: passt die Struktur an, sodass leere Spalten verschwinden und die Elemente den verfügbaren platz füllen */

.fit {
  grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
}

.grid-element {
  background-color: deeppink;
  padding: 20px;
  color: white;
  border: 1px solid grey;
}
